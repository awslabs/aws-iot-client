plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.github.ben-manes.versions' version '0.27.0'
}

def gradleDependencyVersion = '6.0.1'

wrapper {
    gradleVersion = gradleDependencyVersion
    distributionType = Wrapper.DistributionType.ALL
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'

mainClassName = 'com.awslabs.iot.client.applications.AwsIotClientConsole'

def jcommanderVersion = '1.78'
def guiceVersion = '4.2.2'
def awsSdk2Version = '2.10.47'
def awsSdkVersion = '1.11.704'
def gsonVersion = '2.8.6'
def slf4jVersion = '1.7.30'
def vertxVersion = '3.8.4'
def jcabiManifestsVersion = '1.1'
def jcabiLogVersion = '0.18.1'
def jlineVersion = '3.13.3'
def commonsLang3Version = '3.9'
def vavrVersion = '0.10.2'
def junitVersion = '4.13'
def resultsIteratorForAwsJavaSdkVersion = '0.2.0'
def awsIotCoreWebsocketsVersion = '0.6.3'

distZip.enabled = shadowDistZip.enabled = false
distTar.enabled = shadowDistTar.enabled = false

group = 'com.awslabs.iot.client.applications.AwsIotClientConsole'
version = '1.0-SNAPSHOT'

description = """"""

shadowJar {
    // Create a shadow JAR with all of the necessary dependencies
    archiveName = 'aws-iot-client.jar'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "com.google.inject:guice:$guiceVersion"

    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.beust:jcommander:$jcommanderVersion"
    compile "com.amazonaws:aws-java-sdk-greengrass:$awsSdkVersion"
    compile "com.amazonaws:aws-java-sdk-iam:$awsSdkVersion"
    compile "com.amazonaws:aws-java-sdk-iot:$awsSdkVersion"
    compile "com.amazonaws:aws-java-sdk-logs:$awsSdkVersion"
    compile "com.amazonaws:aws-java-sdk-lambda:$awsSdkVersion"
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "com.jcabi:jcabi-manifests:$jcabiManifestsVersion"
    compile "org.jline:jline:$jlineVersion"
    compile "com.jcabi:jcabi-log:$jcabiLogVersion"
    compile "org.apache.commons:commons-lang3:$commonsLang3Version"
    compile "com.github.awslabs:results-iterator-for-aws-java-sdk:$resultsIteratorForAwsJavaSdkVersion"
    compile "com.github.awslabs:aws-iot-core-websockets:$awsIotCoreWebsocketsVersion"
    compile "software.amazon.awssdk:iotsecuretunneling:$awsSdk2Version"

    compile "io.vavr:vavr:$vavrVersion"

    testCompile "junit:junit:$junitVersion"
}

// From: https://gist.github.com/matthiasbalke/3c9ecccbea1d460ee4c3fbc5843ede4a
task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                resolveConfiguration(configuration)
            }
            subProject.configurations.each { configuration ->
                resolveConfiguration(configuration)
            }
        }
    }
}

void resolveConfiguration(configuration) {
    if (isResolveableConfiguration(configuration)) {
        configuration.resolve()
    }
}

boolean isResolveableConfiguration(configuration) {
    def nonResolveableConfigurations = ['apiElements', 'implementation',
                                        'runtimeElements', 'runtimeOnly',
                                        'testImplementation', 'testRuntimeOnly',
                                        'generatedImplementation', 'generatedRuntimeOnly']

    if (nonResolveableConfigurations.contains(configuration.getName())) {
        return false
    }
    return true
}
